#ifndef DOCSTRINGS
#define DOCSTRINGS

/*
 * Docstrings for the fastnumbers functions.
 *
 * Author: Seth M. Morton, August 2, 2014
 */


const char module_docstring[] = "Quickly convert strings to numbers.";


const char safe_real_docstring[] = 
"Convert input to an `int` or `float` if possible or return input as-is.\n"
"\n"
"Convert input to an `int` or `float` if possible, return unchanged if not\n"
"possible.  No `ValueError` will be raised for invalid input, although\n"
"a `TypeError` error will be raised for types the `float` function also does\n"
"not accept, like a `list`.  The return value is guaranteed to be of\n"
"type `str`, `int`, or `float` (or `long` on Python2).\n"
"\n"
"Parameters\n"
"----------\n"
"input : {str, float, int, long}\n"
"    The input you wish to convert to a real number.\n"
"\n"
"Returns\n"
"-------\n"
"out : {str, float, int, long}\n"
"    If the input could be converted to an `int`, the return type will be\n"
"    `int` (or `long` on Python2 if the integer is large enough).\n"
"    If the input could be converted to a `float` but not an `int`, the\n"
"    return type will be `float`.  Otherwise, the input `str` will be\n"
"    returned as-is.\n"
"\n"
"Raises\n"
"------\n"
"TypeError\n"
"    If the input is not one of `str`, `float`, or `int`\n"
"    (or `long` on Python2).\n"
"\n"
"Examples\n"
"--------\n"
"\n"
"    >>> from fastnumbers import safe_real\n"
"    >>> safe_real('56')\n"
"    56\n"
"    >>> safe_real('56.0')\n"
"    56\n"
"    >>> safe_real('56.07')\n"
"    56.07\n"
"    >>> safe_real('56.07 lb')\n"
"    '56.07 lb'\n"
"    >>> safe_real(56.07)\n"
"    56.07\n"
"    >>> safe_real(56.0)\n"
"    56.0\n"
"    >>> safe_real(56)\n"
"    56\n"
"\n"
"Notes\n"
"-----\n"
"It is roughly equivalent to (but much faster than)\n"
"\n"
"    >>> def safe_real(input):\n"
"    ...     try:\n"
"    ...         a = float(input)\n"
"    ...     except ValueError:\n"
"    ...         return input\n"
"    ...     else:\n"
"    ...         return int(a) if a.is_integer() else a\n"
"    ... \n"
"\n";


const char safe_float_docstring[] = 
"Convert input to a `float` if possible or return input as-is.\n"
"\n"
"Convert input to a `float` if possible, return unchanged if not\n"
"possible.  No `ValueError` will be raised for invalid input, although\n"
"a `TypeError` error will be raised for types the `float` function also does\n"
"not accept, like a `list`.  The return value is guaranteed to be of\n"
"type `str` or `float`.\n"
"\n"
"Parameters\n"
"----------\n"
"input : {str, float, int, long}\n"
"    The input you wish to convert to a `float`.\n"
"\n"
"Returns\n"
"-------\n"
"out : {str, float}\n"
"    If the input could be converted to a `float` the return type will\n"
"    be `float`. Otherwise, the input `str` will be returned as-is.\n"
"\n"
"Raises\n"
"------\n"
"TypeError\n"
"    If the input is not one of `str`, `float`, or `int`\n"
"    (or `long` on Python2).\n"
"\n"
"Examples\n"
"--------\n"
"\n"
"    >>> from fastnumbers import safe_float\n"
"    >>> safe_float('56')\n"
"    56.0\n"
"    >>> safe_float('56.0')\n"
"    56.0\n"
"    >>> safe_float('56.07')\n"
"    56.07\n"
"    >>> safe_float('56.07 lb')\n"
"    '56.07 lb'\n"
"    >>> safe_float(56.07)\n"
"    56.07\n"
"    >>> safe_float(56)\n"
"    56.0\n"
"\n"
"Notes\n"
"-----\n"
"It is roughly equivalent to (but much faster than)\n"
"\n"
"    >>> def safe_float(input):\n"
"    ...    try:\n"
"    ...        return float(input)\n"
"    ...    except ValueError:\n"
"    ...        return input\n"
"    ... \n"
"\n";


const char safe_int_docstring[] = 
"Convert input to an `int` if possible or return input as-is.\n"
"\n"
"Convert input to an `int` if possible, return unchanged if not\n"
"possible.  No `ValueError` will be raised for invalid input, although\n"
"a `TypeError` error will be raised for types the `int` function also does\n"
"not accept, like a `list`.  The return value is guaranteed to be of\n"
"type `str` or `int` (or `long` on Python2).\n"
"\n"
"Parameters\n"
"----------\n"
"input : {str, float, int, long}\n"
"    The input you wish to convert to an `int`.\n"
"\n"
"Returns\n"
"-------\n"
"out : {str, int, long}\n"
"    If the input could be converted to an `int`, the return type will be\n"
"    `int` (or `long` on Python2 if the integer is large enough).\n"
"    Otherwise, the input `str` will be returned as-is.\n"
"\n"
"Raises\n"
"------\n"
"TypeError\n"
"    If the input is not one of `str`, `float`, or `int`\n"
"    (or `long` on Python2).\n"
"\n"
"Examples\n"
"--------\n"
"\n"
"    >>> from fastnumbers import safe_int\n"
"    >>> safe_int('56')\n"
"    56\n"
"    >>> safe_int('56.0')\n"
"    '56.0'\n"
"    >>> safe_int('56.07 lb')\n"
"    '56.07 lb'\n"
"    >>> safe_int(56.07)\n"
"    56\n"
"    >>> safe_int(56)\n"
"    56\n"
"\n"
"Notes\n"
"-----\n"
"It is roughly equivalent to (but much faster than)\n"
"\n"
"    >>> def safe_int(input):\n"
"    ...    try:\n"
"    ...        return int(input)\n"
"    ...    except ValueError:\n"
"    ...        return input\n"
"    ... \n"
"\n";


const char safe_forceint_docstring[] = 
"Convert input to an `int` if possible (including float strings)"
"or return input as-is.\n"
"\n"
"Convert input to an `int` if possible, return unchanged if not\n"
"possible.  No `ValueError` will be raised for invalid input, although\n"
"a `TypeError` error will be raised for types the `float` function also does\n"
"not accept, like a `list`.  The return value is guaranteed to be of\n"
"type `str` or `int` (or `long` on Python2).\n"
"\n"
"`safe_forceint` is different from `safe_int` in that it will convert\n"
"strings to `int` that would normally raise a `ValueError` for the\n"
"`int` function but not the `float` function`.\n"
"\n"
"Parameters\n"
"----------\n"
"input : {str, float, int, long}\n"
"    The input you wish to convert to an `int`.\n"
"\n"
"Returns\n"
"-------\n"
"out : {str, int, long}\n"
"    If the input could be converted to an `int`, the return type will be\n"
"    `int` (or `long` on Python2 if the integer is large enough).\n"
"    Otherwise, the input `str` will be returned as-is.\n"
"\n"
"Raises\n"
"------\n"
"TypeError\n"
"    If the input is not one of `str`, `float`, or `int`\n"
"    (or `long` on Python2).\n"
"\n"
"Examples\n"
"--------\n"
"\n"
"    >>> from fastnumbers import safe_forceint\n"
"    >>> safe_forceint('56')\n"
"    56\n"
"    >>> safe_forceint('56.0')\n"
"    56\n"
"    >>> safe_forceint('56.07')\n"
"    56\n"
"    >>> safe_forceint('56.07 lb')\n"
"    '56.07 lb'\n"
"    >>> safe_forceint(56.07)\n"
"    56\n"
"    >>> safe_forceint(56)\n"
"    56\n"
"\n"
"Notes\n"
"-----\n"
"It is roughly equivalent to (but much faster than)\n"
"\n"
"    >>> def safe_forceint(input):\n"
"    ...     try:\n"
"    ...         return int(input)\n"
"    ...     except ValueError:\n"
"    ...         try:\n"
"    ...             return int(float(input))\n"
"    ...         except ValueError:\n"
"    ...             return input\n"
"    ... \n"
"\n";


const char fast_real_docstring[] = 
"Convert input to an `int` or `float` if possible or return input as-is.\n"
"\n"
"Convert input to an `int` or `float` if possible, return unchanged if not\n"
"possible.  No `ValueError` will be raised for invalid input, although\n"
"a `TypeError` error will be raised for types the `float` function also does\n"
"not accept, like a `list`.  The return value is guaranteed to be of\n"
"type `str`, `int`, or `float` (or `long` on Python2).\n"
"\n"
"This function differs from `safe_real` in that no overflow/underflow\n"
"checks are performed, and the fast implementation of atof that is used\n"
"can cause a `float` to lose accuracy around the 12th decimal place\n"
"for large exponents.  For small numbers, neither of these issues will be a\n"
"problem and the enhancement in speed is significant over `safe_real`.\n"
"\n"
"Parameters\n"
"----------\n"
"input : {str, float, int, long}\n"
"    The input you wish to convert to a real number.\n"
"\n"
"Returns\n"
"-------\n"
"out : {str, float, int, long}\n"
"    If the input could be converted to an `int`, the return type will be\n"
"    `int` (or `long` on Python2 if the integer is large enough).\n"
"    If the input could be converted to a `float` but not an `int`, the\n"
"    return type will be `float`.  Otherwise, the input `str` will be\n"
"    returned as-is.\n"
"\n"
"Raises\n"
"------\n"
"TypeError\n"
"    If the input is not one of `str`, `float`, or `int`\n"
"    (or `long` on Python2).\n"
"\n"
"Examples\n"
"--------\n"
"\n"
"    >>> from fastnumbers import fast_real\n"
"    >>> fast_real('56')\n"
"    56\n"
"    >>> fast_real('56.0')\n"
"    56\n"
"    >>> fast_real('56.07')\n"
"    56.07\n"
"    >>> fast_real('56.07 lb')\n"
"    '56.07 lb'\n"
"    >>> fast_real(56.07)\n"
"    56.07\n"
"    >>> fast_real(56.0)\n"
"    56.0\n"
"    >>> fast_real(56)\n"
"    56\n"
"\n"
"Notes\n"
"-----\n"
"It is roughly equivalent to (but much faster than)\n"
"\n"
"    >>> def fast_real(input):\n"
"    ...     try:\n"
"    ...         a = float(input)\n"
"    ...     except ValueError:\n"
"    ...         return input\n"
"    ...     else:\n"
"    ...         return int(a) if a.is_integer() else a\n"
"    ... \n"
"\n";


const char fast_float_docstring[] = 
"Convert input to a `float` if possible or return input as-is.\n"
"\n"
"Convert input to a `float` if possible, return unchanged if not\n"
"possible.  No `ValueError` will be raised for invalid input, although\n"
"a `TypeError` error will be raised for types the `float` function also does\n"
"not accept, like a `list`.  The return value is guaranteed to be of\n"
"type `str` or `float`.\n"
"\n"
"This function differs from `safe_float` in that no overflow/underflow\n"
"checks are performed, and the fast implementation of atof that is used\n"
"can cause a `float` to lose accuracy around the 12th decimal place\n"
"for large exponents.  For small numbers, neither of these issues will be a\n"
"problem and the enhancement in speed is significant over `safe_float`.\n"
"\n"
"Parameters\n"
"----------\n"
"input : {str, float, int, long}\n"
"    The input you wish to convert to a `float`.\n"
"\n"
"Returns\n"
"-------\n"
"out : {str, float}\n"
"    If the input could be converted to a `float` the return type will\n"
"    be `float`. Otherwise, the input `str` will be returned as-is.\n"
"\n"
"Raises\n"
"------\n"
"TypeError\n"
"    If the input is not one of `str`, `float`, or `int`\n"
"    (or `long` on Python2).\n"
"\n"
"Examples\n"
"--------\n"
"\n"
"    >>> from fastnumbers import fast_float\n"
"    >>> fast_float('56')\n"
"    56.0\n"
"    >>> fast_float('56.0')\n"
"    56.0\n"
"    >>> fast_float('56.07')\n"
"    56.07\n"
"    >>> fast_float('56.07 lb')\n"
"    '56.07 lb'\n"
"    >>> fast_float(56.07)\n"
"    56.07\n"
"    >>> fast_float(56)\n"
"    56.0\n"
"\n"
"Notes\n"
"-----\n"
"It is roughly equivalent to (but much faster than)\n"
"\n"
"    >>> def fast_float(input):\n"
"    ...    try:\n"
"    ...        return float(input)\n"
"    ...    except ValueError:\n"
"    ...        return input\n"
"    ... \n"
"\n";


const char fast_int_docstring[] = 
"Convert input to an `int` if possible or return input as-is.\n"
"\n"
"Convert input to an `int` if possible, return unchanged if not\n"
"possible.  No `ValueError` will be raised for invalid input, although\n"
"a `TypeError` error will be raised for types the `int` function also does\n"
"not accept, like a `list`.  The return value is guaranteed to be of\n"
"type `str` or `int` (or `long` on Python2).\n"
"\n"
"This function differs from `safe_int` in that no overflow/underflow\n"
"checks are performed.  For small numbers, this issue will not be a\n"
"problem and the enhancement in speed is significant over `safe_int`.\n"
"\n"
"Parameters\n"
"----------\n"
"input : {str, float, int, long}\n"
"    The input you wish to convert to an `int`.\n"
"\n"
"Returns\n"
"-------\n"
"out : {str, int, long}\n"
"    If the input could be converted to an `int`, the return type will be\n"
"    `int` (or `long` on Python2 if the integer is large enough).\n"
"    Otherwise, the input `str` will be returned as-is.\n"
"\n"
"Raises\n"
"------\n"
"TypeError\n"
"    If the input is not one of `str`, `float`, or `int`\n"
"    (or `long` on Python2).\n"
"\n"
"Examples\n"
"--------\n"
"\n"
"    >>> from fastnumbers import fast_int\n"
"    >>> fast_int('56')\n"
"    56\n"
"    >>> fast_int('56.0')\n"
"    '56.0'\n"
"    >>> fast_int('56.07 lb')\n"
"    '56.07 lb'\n"
"    >>> fast_int(56.07)\n"
"    56\n"
"    >>> fast_int(56)\n"
"    56\n"
"\n"
"Notes\n"
"-----\n"
"It is roughly equivalent to (but much faster than)\n"
"\n"
"    >>> def fast_int(input):\n"
"    ...    try:\n"
"    ...        return int(input)\n"
"    ...    except ValueError:\n"
"    ...        return input\n"
"    ... \n"
"\n";


const char fast_forceint_docstring[] = 
"Convert input to an `int` if possible (including float strings) "
"or return input as-is.\n"
"\n"
"Convert input to an `int` if possible, return unchanged if not\n"
"possible.  No `ValueError` will be raised for invalid input, although\n"
"a `TypeError` error will be raised for types the `float` function also does\n"
"not accept, like a `list`.  The return value is guaranteed to be of\n"
"type `str` or `int` (or `long` on Python2).\n"
"\n"
"`fast_forceint` is different from `fast_int` in that it will convert\n"
"strings to `int` that would normally raise a `ValueError` for the\n"
"`int` function but not the `float` function`.\n"
"\n"
"This function differs from `safe_forceint` in that no overflow/underflow\n"
"checks are performed, and the fast implementation of atof that is used\n"
"can cause a `float` to lose accuracy around the 12th decimal place\n"
"for large exponents.  For small numbers, neither of these issues will be a\n"
"problem and the enhancement in speed is significant over `safe_forceint`.\n"
"\n"
"Parameters\n"
"----------\n"
"input : {str, float, int, long}\n"
"    The input you wish to convert to an `int`.\n"
"\n"
"Returns\n"
"-------\n"
"out : {str, int, long}\n"
"    If the input could be converted to an `int`, the return type will be\n"
"    `int` (or `long` on Python2 if the integer is large enough).\n"
"    Otherwise, the input `str` will be returned as-is.\n"
"\n"
"Raises\n"
"------\n"
"TypeError\n"
"    If the input is not one of `str`, `float`, or `int`\n"
"    (or `long` on Python2).\n"
"\n"
"Examples\n"
"--------\n"
"\n"
"    >>> from fastnumbers import fast_forceint\n"
"    >>> fast_forceint('56')\n"
"    56\n"
"    >>> fast_forceint('56.0')\n"
"    56\n"
"    >>> fast_forceint('56.07')\n"
"    56\n"
"    >>> fast_forceint('56.07 lb')\n"
"    '56.07 lb'\n"
"    >>> fast_forceint(56.07)\n"
"    56\n"
"    >>> fast_forceint(56)\n"
"    56\n"
"\n"
"Notes\n"
"-----\n"
"It is roughly equivalent to (but much faster than)\n"
"\n"
"    >>> def fast_forceint(input):\n"
"    ...     try:\n"
"    ...         return int(input)\n"
"    ...     except ValueError:\n"
"    ...         try:\n"
"    ...             return int(float(input))\n"
"    ...         except ValueError:\n"
"    ...             return input\n"
"    ... \n"
"\n";


const char isreal_docstring[] = 
"Quickly determine if a string (or object) is a real number.\n"
"\n"
"Quickly determine if a string (or object) is a real number. No value\n"
"error will be raised if it is not, even for objects like `list`.\n"
"\n"
"It differs from `isfloat` in that an `int` object will return `True`.\n"
"\n"
"Parameters\n"
"----------\n"
"input :\n"
"    The input you wish to test if it is a real number.\n"
"\n"
"Returns\n"
"-------\n"
"result : bool\n"
"    Whether or not the input is a real number.\n"
"\n"
"Examples\n"
"--------\n"
"\n"
"    >>> from fastnumbers import isreal\n"
"    >>> isreal('56')\n"
"    True\n"
"    >>> isreal('56.07')\n"
"    True\n"
"    >>> isreal('56.07 lb')\n"
"    False\n"
"    >>> isreal(56.07)\n"
"    True\n"
"    >>> isreal(56)\n"
"    True\n"
"\n"
"Notes\n"
"-----\n"
"It is roughly equivalent to (but much faster than)\n"
"\n"
"    >>> import re\n"
"    >>> def isreal(input):\n"
"    ...     try:\n"
"    ...         return bool(re.match(r'[-+]?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?$', input))\n"
"    ...     except ValueError:\n"
"    ...         return type(input) in (int, float)\n"
"    ... \n"
"\n";


const char isfloat_docstring[] = 
"Quickly determine if a string (or object) is a `float`.\n"
"\n"
"Quickly determine if a string (or object) is a `float`. No value\n"
"error will be raised if it is not, even for objects like `list`.\n"
"\n"
"It differs from `isreal` in that an `int` object will return `False`.\n"
"\n"
"Parameters\n"
"----------\n"
"input :\n"
"    The input you wish to test if it is a `float`.\n"
"\n"
"Returns\n"
"-------\n"
"result : bool\n"
"    Whether or not the input is a `float`.\n"
"\n"
"Examples\n"
"--------\n"
"\n"
"    >>> from fastnumbers import isfloat\n"
"    >>> isfloat('56')\n"
"    True\n"
"    >>> isfloat('56.07')\n"
"    True\n"
"    >>> isfloat('56.07 lb')\n"
"    False\n"
"    >>> isfloat(56.07)\n"
"    True\n"
"    >>> isfloat(56)\n"
"    False\n"
"\n"
"Notes\n"
"-----\n"
"It is roughly equivalent to (but much faster than)\n"
"\n"
"    >>> import re\n"
"    >>> def isfloat(input):\n"
"    ...     try:\n"
"    ...         return bool(re.match(r'[-+]?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?$', input))\n"
"    ...     except ValueError:\n"
"    ...         return type(input) == float\n"
"    ... \n"
"\n";


const char isint_docstring[] = 
"Quickly determine if a string (or object) is an `int`.\n"
"\n"
"Quickly determine if a string (or object) is an `int`. No value\n"
"error will be raised if it is not, even for objects like `list`.\n"
"\n"
"Parameters\n"
"----------\n"
"input :\n"
"    The input you wish to test if it is an `int`.\n"
"\n"
"Returns\n"
"-------\n"
"result : bool\n"
"    Whether or not the input is an `int`.\n"
"\n"
"Examples\n"
"--------\n"
"\n"
"    >>> from fastnumbers import isint\n"
"    >>> isint('56')\n"
"    True\n"
"    >>> isint('56.07')\n"
"    False\n"
"    >>> isint('56.07 lb')\n"
"    False\n"
"    >>> isint(56.07)\n"
"    False\n"
"    >>> isint(56)\n"
"    True\n"
"\n"
"Notes\n"
"-----\n"
"It is roughly equivalent to (but much faster than)\n"
"\n"
"    >>> import re\n"
"    >>> def isint(input):\n"
"    ...     try:\n"
"    ...         return bool(re.match(r'[-+]\\d+', input))\n"
"    ...     except ValueError:\n"
"    ...         return type(input) == int\n"
"    ... \n"
"\n";


const char isintlike_docstring[] = 
"Quickly determine if a string (or object) is an `int` or can be one.\n"
"\n"
"Quickly determine if a string (or object) is an `int`. No value\n"
"error will be raised if it is not, even for objects like `list`.\n"
"\n"
"It differs from `isint` in that if the result can be a `float`, if that\n"
"`float` actually represents an `int`.\n"
"\n"
"Parameters\n"
"----------\n"
"input :\n"
"    The input you wish to test if it is an `int`.\n"
"\n"
"Returns\n"
"-------\n"
"result : bool\n"
"    Whether or not the input is an `int`.\n"
"\n"
"Examples\n"
"--------\n"
"\n"
"    >>> from fastnumbers import isintlike\n"
"    >>> isintlike('56')\n"
"    True\n"
"    >>> isintlike('56.07')\n"
"    False\n"
"    >>> isintlike('56.0')\n"
"    True\n"
"    >>> isintlike('56.07 lb')\n"
"    False\n"
"    >>> isintlike(56.07)\n"
"    False\n"
"    >>> isintlike(56.0)\n"
"    True\n"
"    >>> isintlike(56)\n"
"    True\n"
"\n"
"Notes\n"
"-----\n"
"It is roughly equivalent to (but much faster than)\n"
"\n"
"    >>> import re\n"
"    >>> def isintlike(input):\n"
"    ...     try:\n"
"    ...         if re.match(r'[-+]\\d+', input):\n"
"    ...             return True\n"
"    ...         elif re.match(r'[-+]?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?$', input):\n"
"    ...             return float(input).is_integer()\n"
"    ...         else:\n"
"    ...             return False\n"
"    ...     except ValueError:\n"
"    ...         if type(input) == float:\n"
"    ...             return input.is_integer()\n"
"    ...         elif type(input) == int:\n"
"    ...             return True\n"
"    ...         else:\n"
"    ...             return False\n"
"    ... \n"
"\n";


#endif /* DOCSTRINGS */